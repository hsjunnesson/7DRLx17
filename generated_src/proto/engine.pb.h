// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/engine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fengine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fengine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fengine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fengine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fengine_2eproto;
namespace engine {
class AtlasParams;
class AtlasParamsDefaultTypeInternal;
extern AtlasParamsDefaultTypeInternal _AtlasParams_default_instance_;
class AtlasParams_TileNamesEntry_DoNotUse;
class AtlasParams_TileNamesEntry_DoNotUseDefaultTypeInternal;
extern AtlasParams_TileNamesEntry_DoNotUseDefaultTypeInternal _AtlasParams_TileNamesEntry_DoNotUse_default_instance_;
class ColorParams;
class ColorParamsDefaultTypeInternal;
extern ColorParamsDefaultTypeInternal _ColorParams_default_instance_;
class DunGenParams;
class DunGenParamsDefaultTypeInternal;
extern DunGenParamsDefaultTypeInternal _DunGenParams_default_instance_;
class EngineParams;
class EngineParamsDefaultTypeInternal;
extern EngineParamsDefaultTypeInternal _EngineParams_default_instance_;
}  // namespace engine
PROTOBUF_NAMESPACE_OPEN
template<> ::engine::AtlasParams* Arena::CreateMaybeMessage<::engine::AtlasParams>(Arena*);
template<> ::engine::AtlasParams_TileNamesEntry_DoNotUse* Arena::CreateMaybeMessage<::engine::AtlasParams_TileNamesEntry_DoNotUse>(Arena*);
template<> ::engine::ColorParams* Arena::CreateMaybeMessage<::engine::ColorParams>(Arena*);
template<> ::engine::DunGenParams* Arena::CreateMaybeMessage<::engine::DunGenParams>(Arena*);
template<> ::engine::EngineParams* Arena::CreateMaybeMessage<::engine::EngineParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace engine {

// ===================================================================

class ColorParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:engine.ColorParams) */ {
 public:
  inline ColorParams() : ColorParams(nullptr) {}
  virtual ~ColorParams();

  ColorParams(const ColorParams& from);
  ColorParams(ColorParams&& from) noexcept
    : ColorParams() {
    *this = ::std::move(from);
  }

  inline ColorParams& operator=(const ColorParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorParams& operator=(ColorParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColorParams& default_instance();

  static inline const ColorParams* internal_default_instance() {
    return reinterpret_cast<const ColorParams*>(
               &_ColorParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ColorParams& a, ColorParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColorParams* New() const final {
    return CreateMaybeMessage<ColorParams>(nullptr);
  }

  ColorParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColorParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColorParams& from);
  void MergeFrom(const ColorParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "engine.ColorParams";
  }
  protected:
  explicit ColorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fengine_2eproto);
    return ::descriptor_table_proto_2fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
    kAFieldNumber = 4,
  };
  // int32 r = 1;
  void clear_r();
  ::PROTOBUF_NAMESPACE_ID::int32 r() const;
  void set_r(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_r() const;
  void _internal_set_r(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 g = 2;
  void clear_g();
  ::PROTOBUF_NAMESPACE_ID::int32 g() const;
  void set_g(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_g() const;
  void _internal_set_g(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 b = 3;
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::int32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 a = 4;
  void clear_a();
  ::PROTOBUF_NAMESPACE_ID::int32 a() const;
  void set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_a() const;
  void _internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:engine.ColorParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 r_;
  ::PROTOBUF_NAMESPACE_ID::int32 g_;
  ::PROTOBUF_NAMESPACE_ID::int32 b_;
  ::PROTOBUF_NAMESPACE_ID::int32 a_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fengine_2eproto;
};
// -------------------------------------------------------------------

class AtlasParams_TileNamesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AtlasParams_TileNamesEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AtlasParams_TileNamesEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  AtlasParams_TileNamesEntry_DoNotUse();
  explicit AtlasParams_TileNamesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AtlasParams_TileNamesEntry_DoNotUse& other);
  static const AtlasParams_TileNamesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AtlasParams_TileNamesEntry_DoNotUse*>(&_AtlasParams_TileNamesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "engine.AtlasParams.TileNamesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fengine_2eproto);
    return ::descriptor_table_proto_2fengine_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class AtlasParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:engine.AtlasParams) */ {
 public:
  inline AtlasParams() : AtlasParams(nullptr) {}
  virtual ~AtlasParams();

  AtlasParams(const AtlasParams& from);
  AtlasParams(AtlasParams&& from) noexcept
    : AtlasParams() {
    *this = ::std::move(from);
  }

  inline AtlasParams& operator=(const AtlasParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline AtlasParams& operator=(AtlasParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AtlasParams& default_instance();

  static inline const AtlasParams* internal_default_instance() {
    return reinterpret_cast<const AtlasParams*>(
               &_AtlasParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AtlasParams& a, AtlasParams& b) {
    a.Swap(&b);
  }
  inline void Swap(AtlasParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AtlasParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AtlasParams* New() const final {
    return CreateMaybeMessage<AtlasParams>(nullptr);
  }

  AtlasParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AtlasParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AtlasParams& from);
  void MergeFrom(const AtlasParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AtlasParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "engine.AtlasParams";
  }
  protected:
  explicit AtlasParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fengine_2eproto);
    return ::descriptor_table_proto_2fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTileNamesFieldNumber = 4,
    kTextureFieldNumber = 1,
    kTileSizeFieldNumber = 2,
    kGutterFieldNumber = 3,
  };
  // map<string, int32> tile_names = 4;
  int tile_names_size() const;
  private:
  int _internal_tile_names_size() const;
  public:
  void clear_tile_names();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_tile_names() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_tile_names();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      tile_names() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_tile_names();

  // string texture = 1;
  void clear_texture();
  const std::string& texture() const;
  void set_texture(const std::string& value);
  void set_texture(std::string&& value);
  void set_texture(const char* value);
  void set_texture(const char* value, size_t size);
  std::string* mutable_texture();
  std::string* release_texture();
  void set_allocated_texture(std::string* texture);
  private:
  const std::string& _internal_texture() const;
  void _internal_set_texture(const std::string& value);
  std::string* _internal_mutable_texture();
  public:

  // int32 tile_size = 2;
  void clear_tile_size();
  ::PROTOBUF_NAMESPACE_ID::int32 tile_size() const;
  void set_tile_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tile_size() const;
  void _internal_set_tile_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gutter = 3;
  void clear_gutter();
  ::PROTOBUF_NAMESPACE_ID::int32 gutter() const;
  void set_gutter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gutter() const;
  void _internal_set_gutter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:engine.AtlasParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AtlasParams_TileNamesEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> tile_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr texture_;
  ::PROTOBUF_NAMESPACE_ID::int32 tile_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 gutter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fengine_2eproto;
};
// -------------------------------------------------------------------

class EngineParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:engine.EngineParams) */ {
 public:
  inline EngineParams() : EngineParams(nullptr) {}
  virtual ~EngineParams();

  EngineParams(const EngineParams& from);
  EngineParams(EngineParams&& from) noexcept
    : EngineParams() {
    *this = ::std::move(from);
  }

  inline EngineParams& operator=(const EngineParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngineParams& operator=(EngineParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EngineParams& default_instance();

  static inline const EngineParams* internal_default_instance() {
    return reinterpret_cast<const EngineParams*>(
               &_EngineParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EngineParams& a, EngineParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EngineParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EngineParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EngineParams* New() const final {
    return CreateMaybeMessage<EngineParams>(nullptr);
  }

  EngineParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EngineParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EngineParams& from);
  void MergeFrom(const EngineParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "engine.EngineParams";
  }
  protected:
  explicit EngineParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fengine_2eproto);
    return ::descriptor_table_proto_2fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAtlasFieldNumber = 1,
    kClearColorFieldNumber = 5,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kRenderScaleFieldNumber = 4,
  };
  // string atlas = 1;
  void clear_atlas();
  const std::string& atlas() const;
  void set_atlas(const std::string& value);
  void set_atlas(std::string&& value);
  void set_atlas(const char* value);
  void set_atlas(const char* value, size_t size);
  std::string* mutable_atlas();
  std::string* release_atlas();
  void set_allocated_atlas(std::string* atlas);
  private:
  const std::string& _internal_atlas() const;
  void _internal_set_atlas(const std::string& value);
  std::string* _internal_mutable_atlas();
  public:

  // .engine.ColorParams clear_color = 5;
  bool has_clear_color() const;
  private:
  bool _internal_has_clear_color() const;
  public:
  void clear_clear_color();
  const ::engine::ColorParams& clear_color() const;
  ::engine::ColorParams* release_clear_color();
  ::engine::ColorParams* mutable_clear_color();
  void set_allocated_clear_color(::engine::ColorParams* clear_color);
  private:
  const ::engine::ColorParams& _internal_clear_color() const;
  ::engine::ColorParams* _internal_mutable_clear_color();
  public:
  void unsafe_arena_set_allocated_clear_color(
      ::engine::ColorParams* clear_color);
  ::engine::ColorParams* unsafe_arena_release_clear_color();

  // int32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 render_scale = 4;
  void clear_render_scale();
  ::PROTOBUF_NAMESPACE_ID::int32 render_scale() const;
  void set_render_scale(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_render_scale() const;
  void _internal_set_render_scale(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:engine.EngineParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr atlas_;
  ::engine::ColorParams* clear_color_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 render_scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fengine_2eproto;
};
// -------------------------------------------------------------------

class DunGenParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:engine.DunGenParams) */ {
 public:
  inline DunGenParams() : DunGenParams(nullptr) {}
  virtual ~DunGenParams();

  DunGenParams(const DunGenParams& from);
  DunGenParams(DunGenParams&& from) noexcept
    : DunGenParams() {
    *this = ::std::move(from);
  }

  inline DunGenParams& operator=(const DunGenParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DunGenParams& operator=(DunGenParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DunGenParams& default_instance();

  static inline const DunGenParams* internal_default_instance() {
    return reinterpret_cast<const DunGenParams*>(
               &_DunGenParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DunGenParams& a, DunGenParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DunGenParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DunGenParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DunGenParams* New() const final {
    return CreateMaybeMessage<DunGenParams>(nullptr);
  }

  DunGenParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DunGenParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DunGenParams& from);
  void MergeFrom(const DunGenParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DunGenParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "engine.DunGenParams";
  }
  protected:
  explicit DunGenParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fengine_2eproto);
    return ::descriptor_table_proto_2fengine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomCountFieldNumber = 1,
    kMinRoomSizeFieldNumber = 2,
    kMaxRoomSizeFieldNumber = 3,
    kMapWidthFieldNumber = 4,
    kMapHeightFieldNumber = 5,
  };
  // int32 room_count = 1;
  void clear_room_count();
  ::PROTOBUF_NAMESPACE_ID::int32 room_count() const;
  void set_room_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_room_count() const;
  void _internal_set_room_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 min_room_size = 2;
  void clear_min_room_size();
  ::PROTOBUF_NAMESPACE_ID::int32 min_room_size() const;
  void set_min_room_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_room_size() const;
  void _internal_set_min_room_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_room_size = 3;
  void clear_max_room_size();
  ::PROTOBUF_NAMESPACE_ID::int32 max_room_size() const;
  void set_max_room_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_room_size() const;
  void _internal_set_max_room_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 map_width = 4;
  void clear_map_width();
  ::PROTOBUF_NAMESPACE_ID::int32 map_width() const;
  void set_map_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_width() const;
  void _internal_set_map_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 map_height = 5;
  void clear_map_height();
  ::PROTOBUF_NAMESPACE_ID::int32 map_height() const;
  void set_map_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_height() const;
  void _internal_set_map_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:engine.DunGenParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 room_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_room_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_room_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fengine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ColorParams

// int32 r = 1;
inline void ColorParams::clear_r() {
  r_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColorParams::_internal_r() const {
  return r_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColorParams::r() const {
  // @@protoc_insertion_point(field_get:engine.ColorParams.r)
  return _internal_r();
}
inline void ColorParams::_internal_set_r(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  r_ = value;
}
inline void ColorParams::set_r(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:engine.ColorParams.r)
}

// int32 g = 2;
inline void ColorParams::clear_g() {
  g_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColorParams::_internal_g() const {
  return g_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColorParams::g() const {
  // @@protoc_insertion_point(field_get:engine.ColorParams.g)
  return _internal_g();
}
inline void ColorParams::_internal_set_g(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  g_ = value;
}
inline void ColorParams::set_g(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:engine.ColorParams.g)
}

// int32 b = 3;
inline void ColorParams::clear_b() {
  b_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColorParams::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColorParams::b() const {
  // @@protoc_insertion_point(field_get:engine.ColorParams.b)
  return _internal_b();
}
inline void ColorParams::_internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  b_ = value;
}
inline void ColorParams::set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:engine.ColorParams.b)
}

// int32 a = 4;
inline void ColorParams::clear_a() {
  a_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColorParams::_internal_a() const {
  return a_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ColorParams::a() const {
  // @@protoc_insertion_point(field_get:engine.ColorParams.a)
  return _internal_a();
}
inline void ColorParams::_internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  a_ = value;
}
inline void ColorParams::set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:engine.ColorParams.a)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AtlasParams

// string texture = 1;
inline void AtlasParams::clear_texture() {
  texture_.ClearToEmpty();
}
inline const std::string& AtlasParams::texture() const {
  // @@protoc_insertion_point(field_get:engine.AtlasParams.texture)
  return _internal_texture();
}
inline void AtlasParams::set_texture(const std::string& value) {
  _internal_set_texture(value);
  // @@protoc_insertion_point(field_set:engine.AtlasParams.texture)
}
inline std::string* AtlasParams::mutable_texture() {
  // @@protoc_insertion_point(field_mutable:engine.AtlasParams.texture)
  return _internal_mutable_texture();
}
inline const std::string& AtlasParams::_internal_texture() const {
  return texture_.Get();
}
inline void AtlasParams::_internal_set_texture(const std::string& value) {
  
  texture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AtlasParams::set_texture(std::string&& value) {
  
  texture_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:engine.AtlasParams.texture)
}
inline void AtlasParams::set_texture(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  texture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:engine.AtlasParams.texture)
}
inline void AtlasParams::set_texture(const char* value,
    size_t size) {
  
  texture_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:engine.AtlasParams.texture)
}
inline std::string* AtlasParams::_internal_mutable_texture() {
  
  return texture_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AtlasParams::release_texture() {
  // @@protoc_insertion_point(field_release:engine.AtlasParams.texture)
  return texture_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AtlasParams::set_allocated_texture(std::string* texture) {
  if (texture != nullptr) {
    
  } else {
    
  }
  texture_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), texture,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:engine.AtlasParams.texture)
}

// int32 tile_size = 2;
inline void AtlasParams::clear_tile_size() {
  tile_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AtlasParams::_internal_tile_size() const {
  return tile_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AtlasParams::tile_size() const {
  // @@protoc_insertion_point(field_get:engine.AtlasParams.tile_size)
  return _internal_tile_size();
}
inline void AtlasParams::_internal_set_tile_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tile_size_ = value;
}
inline void AtlasParams::set_tile_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tile_size(value);
  // @@protoc_insertion_point(field_set:engine.AtlasParams.tile_size)
}

// int32 gutter = 3;
inline void AtlasParams::clear_gutter() {
  gutter_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AtlasParams::_internal_gutter() const {
  return gutter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AtlasParams::gutter() const {
  // @@protoc_insertion_point(field_get:engine.AtlasParams.gutter)
  return _internal_gutter();
}
inline void AtlasParams::_internal_set_gutter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gutter_ = value;
}
inline void AtlasParams::set_gutter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gutter(value);
  // @@protoc_insertion_point(field_set:engine.AtlasParams.gutter)
}

// map<string, int32> tile_names = 4;
inline int AtlasParams::_internal_tile_names_size() const {
  return tile_names_.size();
}
inline int AtlasParams::tile_names_size() const {
  return _internal_tile_names_size();
}
inline void AtlasParams::clear_tile_names() {
  tile_names_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
AtlasParams::_internal_tile_names() const {
  return tile_names_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
AtlasParams::tile_names() const {
  // @@protoc_insertion_point(field_map:engine.AtlasParams.tile_names)
  return _internal_tile_names();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
AtlasParams::_internal_mutable_tile_names() {
  return tile_names_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
AtlasParams::mutable_tile_names() {
  // @@protoc_insertion_point(field_mutable_map:engine.AtlasParams.tile_names)
  return _internal_mutable_tile_names();
}

// -------------------------------------------------------------------

// EngineParams

// string atlas = 1;
inline void EngineParams::clear_atlas() {
  atlas_.ClearToEmpty();
}
inline const std::string& EngineParams::atlas() const {
  // @@protoc_insertion_point(field_get:engine.EngineParams.atlas)
  return _internal_atlas();
}
inline void EngineParams::set_atlas(const std::string& value) {
  _internal_set_atlas(value);
  // @@protoc_insertion_point(field_set:engine.EngineParams.atlas)
}
inline std::string* EngineParams::mutable_atlas() {
  // @@protoc_insertion_point(field_mutable:engine.EngineParams.atlas)
  return _internal_mutable_atlas();
}
inline const std::string& EngineParams::_internal_atlas() const {
  return atlas_.Get();
}
inline void EngineParams::_internal_set_atlas(const std::string& value) {
  
  atlas_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EngineParams::set_atlas(std::string&& value) {
  
  atlas_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:engine.EngineParams.atlas)
}
inline void EngineParams::set_atlas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  atlas_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:engine.EngineParams.atlas)
}
inline void EngineParams::set_atlas(const char* value,
    size_t size) {
  
  atlas_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:engine.EngineParams.atlas)
}
inline std::string* EngineParams::_internal_mutable_atlas() {
  
  return atlas_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EngineParams::release_atlas() {
  // @@protoc_insertion_point(field_release:engine.EngineParams.atlas)
  return atlas_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EngineParams::set_allocated_atlas(std::string* atlas) {
  if (atlas != nullptr) {
    
  } else {
    
  }
  atlas_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), atlas,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:engine.EngineParams.atlas)
}

// int32 width = 2;
inline void EngineParams::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EngineParams::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EngineParams::width() const {
  // @@protoc_insertion_point(field_get:engine.EngineParams.width)
  return _internal_width();
}
inline void EngineParams::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void EngineParams::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:engine.EngineParams.width)
}

// int32 height = 3;
inline void EngineParams::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EngineParams::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EngineParams::height() const {
  // @@protoc_insertion_point(field_get:engine.EngineParams.height)
  return _internal_height();
}
inline void EngineParams::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void EngineParams::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:engine.EngineParams.height)
}

// int32 render_scale = 4;
inline void EngineParams::clear_render_scale() {
  render_scale_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EngineParams::_internal_render_scale() const {
  return render_scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EngineParams::render_scale() const {
  // @@protoc_insertion_point(field_get:engine.EngineParams.render_scale)
  return _internal_render_scale();
}
inline void EngineParams::_internal_set_render_scale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  render_scale_ = value;
}
inline void EngineParams::set_render_scale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_render_scale(value);
  // @@protoc_insertion_point(field_set:engine.EngineParams.render_scale)
}

// .engine.ColorParams clear_color = 5;
inline bool EngineParams::_internal_has_clear_color() const {
  return this != internal_default_instance() && clear_color_ != nullptr;
}
inline bool EngineParams::has_clear_color() const {
  return _internal_has_clear_color();
}
inline void EngineParams::clear_clear_color() {
  if (GetArena() == nullptr && clear_color_ != nullptr) {
    delete clear_color_;
  }
  clear_color_ = nullptr;
}
inline const ::engine::ColorParams& EngineParams::_internal_clear_color() const {
  const ::engine::ColorParams* p = clear_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::engine::ColorParams&>(
      ::engine::_ColorParams_default_instance_);
}
inline const ::engine::ColorParams& EngineParams::clear_color() const {
  // @@protoc_insertion_point(field_get:engine.EngineParams.clear_color)
  return _internal_clear_color();
}
inline void EngineParams::unsafe_arena_set_allocated_clear_color(
    ::engine::ColorParams* clear_color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clear_color_);
  }
  clear_color_ = clear_color;
  if (clear_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:engine.EngineParams.clear_color)
}
inline ::engine::ColorParams* EngineParams::release_clear_color() {
  
  ::engine::ColorParams* temp = clear_color_;
  clear_color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::engine::ColorParams* EngineParams::unsafe_arena_release_clear_color() {
  // @@protoc_insertion_point(field_release:engine.EngineParams.clear_color)
  
  ::engine::ColorParams* temp = clear_color_;
  clear_color_ = nullptr;
  return temp;
}
inline ::engine::ColorParams* EngineParams::_internal_mutable_clear_color() {
  
  if (clear_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::engine::ColorParams>(GetArena());
    clear_color_ = p;
  }
  return clear_color_;
}
inline ::engine::ColorParams* EngineParams::mutable_clear_color() {
  // @@protoc_insertion_point(field_mutable:engine.EngineParams.clear_color)
  return _internal_mutable_clear_color();
}
inline void EngineParams::set_allocated_clear_color(::engine::ColorParams* clear_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete clear_color_;
  }
  if (clear_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(clear_color);
    if (message_arena != submessage_arena) {
      clear_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clear_color, submessage_arena);
    }
    
  } else {
    
  }
  clear_color_ = clear_color;
  // @@protoc_insertion_point(field_set_allocated:engine.EngineParams.clear_color)
}

// -------------------------------------------------------------------

// DunGenParams

// int32 room_count = 1;
inline void DunGenParams::clear_room_count() {
  room_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DunGenParams::_internal_room_count() const {
  return room_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DunGenParams::room_count() const {
  // @@protoc_insertion_point(field_get:engine.DunGenParams.room_count)
  return _internal_room_count();
}
inline void DunGenParams::_internal_set_room_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  room_count_ = value;
}
inline void DunGenParams::set_room_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_room_count(value);
  // @@protoc_insertion_point(field_set:engine.DunGenParams.room_count)
}

// int32 min_room_size = 2;
inline void DunGenParams::clear_min_room_size() {
  min_room_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DunGenParams::_internal_min_room_size() const {
  return min_room_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DunGenParams::min_room_size() const {
  // @@protoc_insertion_point(field_get:engine.DunGenParams.min_room_size)
  return _internal_min_room_size();
}
inline void DunGenParams::_internal_set_min_room_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_room_size_ = value;
}
inline void DunGenParams::set_min_room_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_room_size(value);
  // @@protoc_insertion_point(field_set:engine.DunGenParams.min_room_size)
}

// int32 max_room_size = 3;
inline void DunGenParams::clear_max_room_size() {
  max_room_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DunGenParams::_internal_max_room_size() const {
  return max_room_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DunGenParams::max_room_size() const {
  // @@protoc_insertion_point(field_get:engine.DunGenParams.max_room_size)
  return _internal_max_room_size();
}
inline void DunGenParams::_internal_set_max_room_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_room_size_ = value;
}
inline void DunGenParams::set_max_room_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_room_size(value);
  // @@protoc_insertion_point(field_set:engine.DunGenParams.max_room_size)
}

// int32 map_width = 4;
inline void DunGenParams::clear_map_width() {
  map_width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DunGenParams::_internal_map_width() const {
  return map_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DunGenParams::map_width() const {
  // @@protoc_insertion_point(field_get:engine.DunGenParams.map_width)
  return _internal_map_width();
}
inline void DunGenParams::_internal_set_map_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_width_ = value;
}
inline void DunGenParams::set_map_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_width(value);
  // @@protoc_insertion_point(field_set:engine.DunGenParams.map_width)
}

// int32 map_height = 5;
inline void DunGenParams::clear_map_height() {
  map_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DunGenParams::_internal_map_height() const {
  return map_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DunGenParams::map_height() const {
  // @@protoc_insertion_point(field_get:engine.DunGenParams.map_height)
  return _internal_map_height();
}
inline void DunGenParams::_internal_set_map_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_height_ = value;
}
inline void DunGenParams::set_map_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_height(value);
  // @@protoc_insertion_point(field_set:engine.DunGenParams.map_height)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace engine

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fengine_2eproto
